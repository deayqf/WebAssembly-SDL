{"version":3,"sources":["./graphics.h","main.c","./player.h","./target.h"],"names":[],"mappingsjBA;AAAA;;;;;ACEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAEA;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAEA;;AAEA;AAAA;;AAEA;;;;AAEA;AAAA;AAAA;;AAEA;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA;AAAA;AACA;AAAA;AAAA;AD/BA;AACA;AAAA;AACA;;;;;;;AAIA;AAEA;ADvBA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AGbA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;ADCA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AD0BA;AAQA;AACA;AACA","file":"index.html","sourcesContent":["typedef struct graphics\n{\n    SDL_Surface* surface;\n    SDL_Rect screen;\n    \n    SDL_Rect back;\n    SDL_Color back_color;\n    \n    SDL_Rect path;\n    SDL_Color path_color;\n    \n    SDL_Rect fill;\n    SDL_Color fill_color;\n} Graphics;\n\nvoid graphicsInit( Graphics* gfx )\n{\n    gfx->surface    = SDL_SetVideoMode( SCREEN_W, SCREEN_H, 32, SDL_SWSURFACE );\n    gfx->screen     = ( SDL_Rect  ){    0,    0, SCREEN_W, SCREEN_H };\n    gfx->back       = ( SDL_Rect  ){    1,    1,      698,      698 };\n    gfx->back_color = ( SDL_Color ){ 0xFF, 0xFF,     0xFF,     0xFF };\n    gfx->path       = ( SDL_Rect  ){   30,   30,      640,      640 };\n    gfx->path_color = ( SDL_Color ){ 0x00, 0x00,     0x00,     0xFF };\n    gfx->fill       = ( SDL_Rect  ){  150,  150,      400,      400 };\n    gfx->fill_color = ( SDL_Color ){ 0xFF, 0xFF,     0xFF,     0xFF };\n}\n\nvoid graphicsDraw( Graphics* gfx, Player* plyr, Target* trgt )\n{\n    SDL_FillRect( gfx->surface, NULL, SDL_MapRGB( gfx->surface->format, 0x00, 0x00, 0x00 ) );\n    SDL_FillRect( gfx->surface, &gfx->back, SDL_MapRGB( gfx->surface->format, gfx->back_color.r, gfx->back_color.g, gfx->back_color.b ) );\n    SDL_FillRect( gfx->surface, &gfx->path, SDL_MapRGB( gfx->surface->format, gfx->path_color.r, gfx->path_color.g, gfx->path_color.b ) );\n    SDL_FillRect( gfx->surface, &gfx->fill, SDL_MapRGB( gfx->surface->format, gfx->fill_color.r, gfx->fill_color.g, gfx->fill_color.b ) );\n    \n    SDL_FillRect( gfx->surface, &trgt->clear, SDL_MapRGB( gfx->surface->format, 0x00, 0x00, 0x00 ) );\n    SDL_FillRect( gfx->surface, &trgt->outter, SDL_MapRGB( gfx->surface->format, trgt->color.r, trgt->color.g, trgt->color.b ) );\n    SDL_FillRect( gfx->surface, &trgt->fill, SDL_MapRGB( gfx->surface->format, 0x00, 0x00, 0x00 ) );\n    SDL_FillRect( gfx->surface, &trgt->goal, SDL_MapRGB( gfx->surface->format, trgt->color.r, trgt->color.g, trgt->color.b ) );\n    \n    SDL_FillRect( gfx->surface, &plyr->body, SDL_MapRGB( gfx->surface->format, plyr->color.r, plyr->color.g, plyr->color.b ) );\n}","#include <stdio.h>\n#include <SDL/SDL.h>\n#include <emscripten.h>\n\n#define TRUE 1\n#define FALSE 0\nstatic int running = TRUE;\n\nstatic const int SCREEN_W = 700;\nstatic const int SCREEN_H = 700;\n\n#include \"direction.h\"\n#include \"target.h\"\n#include \"player.h\"\n#include \"graphics.h\"\n\nGraphics gfx;\nTarget trgt;\nPlayer plyr;\n\nvoid loop()\n{\n    static SDL_Event e;\n    while( SDL_PollEvent( &e ) != 0 )\n    {\n        if( e.type == SDL_QUIT )\n        {\n            running = FALSE;\n        }\n    }\n    \n    playerMovement( &plyr );\n    graphicsDraw( &gfx, &plyr, &trgt );\n    SDL_Flip( gfx.surface );\n}\n\nint main( int argc, char* args[] )\n{\n    printf( \"SDL running through Emscripten\\n\" );\n\n    SDL_Init( SDL_INIT_VIDEO );\n    graphicsInit( &gfx );\n    targetInit( &trgt );\n    playerInit( &plyr );\n\n    #ifdef EMSCRIPTEN\n        emscripten_set_main_loop( loop, 0, 1 );\n    #else\n        while( running == TRUE )\n        {\n            loop();\n        }\n    #endif\n\n    SDL_Quit();\n    printf( \"SDL_Quit\\n\" );\n    return 0;\n}\n","typedef struct player\n{\n    SDL_Rect body;\n    SDL_Color color;\n    SDL_Rect bounds;\n    int x_speed, y_speed;\n    Direction dir;\n} Player;\n\nvoid playerDraw( Player* plyr, SDL_Surface* surface )\n{\n    SDL_FillRect( surface, &plyr->body, SDL_MapRGB( surface->format, plyr->color.r, plyr->color.g, plyr->color.b ) );\n}\n\nvoid playerInit( Player* plyr )\n{\n    plyr->body = ( SDL_Rect ){ 30, 30, 120, 120 };\n    plyr->color = ( SDL_Color ){ 0xFF, 0x00, 0x00, 0xFF };\n    plyr->bounds = ( SDL_Rect ){ 30, 30, 550, 550 };\n    plyr->x_speed = plyr->y_speed = 0;\n    plyr->dir = ( Direction )RIGHT;\n}\n\nvoid playerMovement( Player* plyr )\n{\n    if( plyr->body.x == plyr->bounds.x && plyr->body.y == plyr->bounds.y )\n    {\n        plyr->dir = RIGHT;\n    }\n    if( plyr->body.x == plyr->bounds.w && plyr->body.y == plyr->bounds.y )\n    {\n        plyr->dir = DOWN;\n    }\n    if( plyr->body.x == plyr->bounds.w && plyr->body.y == plyr->bounds.h )\n    {\n        plyr->dir = LEFT;\n    }\n    if( plyr->body.x == plyr->bounds.x && plyr->body.y == plyr->bounds.h )\n    {\n        plyr->dir = UP;\n    }\n\n    switch( plyr->dir )\n    {\n        case RIGHT:\n            plyr->x_speed = 5;\n            plyr->y_speed = 0;\n            break;\n        case DOWN:\n            plyr->x_speed = 0;\n            plyr->y_speed = 5;\n            break;\n        case LEFT:\n            plyr->x_speed = -5;\n            plyr->y_speed = 0;\n            break;\n        case UP:\n            plyr->x_speed = 0;\n            plyr->y_speed = -5;\n            break;\n    }\n\n    plyr->body.x += plyr->x_speed;\n    plyr->body.y += plyr->y_speed;\n}","typedef struct target\n{\n    SDL_Rect clear;\n    SDL_Rect outter;\n    SDL_Rect fill;\n    SDL_Rect goal;\n    SDL_Color color;\n} Target;\n\nvoid targetInit( Target* trgt )\n{\n    trgt->clear = ( SDL_Rect ){ 8, 8, 164, 164 };\n    trgt->outter = ( SDL_Rect ){ 12, 12, 156, 156 };\n    trgt->fill = ( SDL_Rect ){ 25, 25, 130, 130 };\n    trgt->goal = ( SDL_Rect ){ 29, 29, 122, 122 };\n    trgt->color = ( SDL_Color ){ 0x00, 0xCC, 0xFF, 0xFF };\n}"]}